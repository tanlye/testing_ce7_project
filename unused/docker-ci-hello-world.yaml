name: Docker CI hello world workflow
run-name: Running Docker CI hello world workflow by ${{ github.actor }}

on:
  workflow_dispatch:
  pull_request:
    branches:
      - "*"
    paths:
      - "hello-world/**"

env:
  IMAGE_NAME: ${{ vars.HW_IMAGE_NAME }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  # pull-requests: write # This is required for updating pull-requests with comments

jobs:
  Security-Audit:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Run installation of dependencies commands
        run: npm install

      - name: Run a security audit
        id: npm-audit
        run: |
          # Run npm audit and capture output
          output=$(npm audit --audit-level=high --json)

          # Check if there are vulnerabilities found
          if [ $? -eq 0 ]; then
            echo "NPM audit completed successfully with no high vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          else
            echo "NPM audit found the following high vulnerabilities:" >> $GITHUB_STEP_SUMMARY
            echo "$output" | jq -r '.advisories | to_entries[] | "Package: \(.value.module_name), Severity: \(.value.severity), Title: \(.value.title), URL: \(.value.url)"' >> $GITHUB_STEP_SUMMARY
          fi

  Code-Unit-Testing:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run installation of dependencies commands
        run: npm install

      - name: Install Mocha, Chai and Supertest
        # Mocha: A test framework for running tests.
        # Chai: An assertion library for Node.js.
        # Supertest: A library for testing HTTP servers.
        run: npm install --save-dev mocha chai supertest

      - name: Run unit testing command
        id: npm-test
        run: |
          # Run npm test and capture output
          output=$(npm test -- --reporter=json)

          # Check if tests passed or failed
          if [ $? -eq 0 ]; then
            echo "All unit tests passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "Some unit tests failed. See details below:" >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY  # Append test output to summary
          fi

  Snyk-Code-Scan:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk Code Scan And Check Snyk Scan Results
        id: snyk-code
        run: |
          # Run Snyk code test and capture output
          output=$(snyk code test --json)

          # Check if there were any vulnerabilities found
          if [ $? -eq 0 ]; then
            echo "Snyk Code scan completed successfully with no issues found." >> $GITHUB_STEP_SUMMARY
          else
            echo "Snyk Code scan found the following issues:" >> $GITHUB_STEP_SUMMARY
            echo "$output" | jq -r '.issues[] | "Issue: \(.issueType), Severity: \(.severity), Description: \(.description)"' >> $GITHUB_STEP_SUMMARY
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  Docker-Build:
    needs: [Security-Audit, Snyk-Code-Scan, Code-Unit-Testing]
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        id: docker-build
        run: |
          # Run docker build and capture output
          output=$(docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} . 2>&1)

          # Check if the build was successful
          if [ $? -eq 0 ]; then
            echo "Docker image built successfully with tag ${{ env.IMAGE_NAME }}:${{ github.sha }}." >> $GITHUB_STEP_SUMMARY
          else
            echo "Docker build failed with the following errors:" >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY  # Append build output to summary
          fi

  Snyk-Container-Scan:
    needs: Docker-Build
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Build
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check Docker image for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        id: snyk-container
        run: |
          # Run Snyk container scan and capture output
          snyk container test ${{ env.IMAGE_NAME }}:${{ github.sha }} --file=Dockerfile --exclude-base-image-vulns --json-file-output=vuln.json
          # output=$(snyk container test ${{ env.IMAGE_NAME }}:${{ github.sha }} --file=Dockerfile --exclude-base-image-vulns --json)
          # echo "$output" >> $GITHUB_STEP_SUMMARY

          # Check if there were any vulnerabilities found
          if [ $? -eq 0 ]; then
            echo "Snyk Container scan completed successfully with no issues found." >> $GITHUB_STEP_SUMMARY
          else
            echo "Snyk Container scan found the following issues:" >> $GITHUB_STEP_SUMMARY
            echo "vuln.json" | jq -r '.vulnerabilities[] | "Package: \(.package), Severity: \(.severity), Description: \(.description), URL: \(.url)"' >> $GITHUB_STEP_SUMMARY
          fi

  Docker-Run:
    needs: Snyk-Container-Scan
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Build
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Docker Run
        run: |
          # Run the container
          docker run --rm --name hw_container -d -p 8080:8080 ${{ env.IMAGE_NAME }}:${{ github.sha }}

          # Wait for the container to start up
          sleep 5

          # Check if the container is running
          container_status=$(docker inspect -f '{{.State.Running}}' hw_container)
          echo "Container running status: $container_status" >> $GITHUB_STEP_SUMMARY

          if [ "$container_status" = "true" ]; then
            echo "Docker container is running successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "Docker container is not running." >> $GITHUB_STEP_SUMMARY
            exit 1  # Exit with a non-zero code to indicate failure
          fi

      # - name: curl test
      #   run: |
      #     curl_output=$(curl -s localhost:8080)
      #     curl_exit_code=$?  # Capture the exit code of the curl command
      #     echo "$curl_output" >> $GITHUB_STEP_SUMMARY

      #     # Check if curl command was successful
      #     if [ $curl_exit_code -ne 0 ]; then
      #       echo "Curl command failed with exit code: $curl_exit_code" >> $GITHUB_STEP_SUMMARY
      #       exit $curl_exit_code  # Exit with the curl error code
      #     fi

      #     # Check if the response matches "Hello, World!"
      #     if [ "$curl_output" = "Hello, World!" ]; then
      #       echo "Docker run successfully" >> $GITHUB_STEP_SUMMARY
      #       echo "curl command successfully returned: $curl_output" >> $GITHUB_STEP_SUMMARY
      #     else
      #       echo "Docker run failed" >> $GITHUB_STEP_SUMMARY
      #       echo "curl failed to return 'Hello, World!'" >> $GITHUB_STEP_SUMMARY
      #       exit 1  # Exit with a non-zero code to indicate failure
      #     fi

  # Update-Pull-Request:
  #   needs:
  #     [
  #       Security-Audit,
  #       Code-Unit-Testing,
  #       Docker-Build,
  #       Snyk-Code-Scan,
  #       Snyk-Container-Scan,
  #     ]
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: hello-world

  #   steps:
  #     - name: Update Pull Request
  #       if: always()
  #       uses: actions/github-script@v7
  #       env:
  #         NPM_AUDIT_OUTCOME: ${{ needs.Security-Audit.outputs.npm_audit_outcome }}
  #         NPM_TEST_OUTCOME: ${{ needs.Code-Unit-Testing.outputs.npm_test_outcome }}
  #         BUILD_OUTCOME: ${{ needs.Docker-Build.outputs.docker_build_outcome }}
  #         SNYK_CODE_OUTCOME: ${{ needs.Snyk-Code-Scan.outputs.snyk_code_outcome }}
  #         SNYK_CONTAINER_OUTCOME: ${{ needs.Snyk-Container-Scan.outputs.snyk_container_outcome }}
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### NPM Security Audit ‚öôÔ∏è\`${process.env.NPM_AUDIT_OUTCOME}\`
  #           #### NPM Unit Test ‚öôÔ∏è\`${process.env.NPM_TEST_OUTCOME}\`
  #           #### Snyk Code Test üîç\`${process.env.SNYK_CODE_OUTCOME}\`
  #           #### Docker Build üèóÔ∏è\`${process.env.BUILD_OUTCOME}\`
  #           #### Synk Container Test üîç\`${process.env.SNYK_CONTAINER_OUTCOME}\`

  #           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })
