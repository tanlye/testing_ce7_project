name: Terraform CI workflow
run-name: Running Terraform CI workflow by ${{ github.actor }}

on:
  workflow_dispatch:
  pull_request:
    branches:
      - "*"
    paths:
      - "terraform/**"

env:
  AWS_REGION: ${{ vars.AWS_REGION }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  security-events: write # This is required for github/codeql-action/upload-sarif to upload SARIF results
  # pull-requests: write # This is required for updating pull-requests with comments

jobs:
  Terraform-Checks:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt check
        id: fmt
        run: |
          # Run terraform fmt check and capture output
          output=$(terraform fmt -check) || true
          echo "$output" >> $GITHUB_STEP_SUMMARY  # Append output to step summary

          # Check if formatting issues were found
          if [ $? -ne 0 ]; then
            echo "Formatting issues found!" >> $GITHUB_STEP_SUMMARY
          else
            echo "All files are properly formatted." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform init
        id: init
        run: |
          # Run terraform init and capture output
          output=$(terraform init -backend=false 2>&1) || true

          # Check if initialization was successful
          if [ $? -eq 0 ]; then
            echo "Terraform initialized successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform initialization failed with the following error:" >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY  # Append error output to summary
          fi

      - name: Terraform Validate
        id: validate
        run: |
          # Run terraform validate and capture output
          output=$(terraform validate -no-color) || true
          if [ $? -eq 0 ]; then
            echo "Terraform configuration is valid." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform configuration is invalid:" >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY  # Append validation errors to summary
          fi

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: Show TFLint version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        id: tflint
        run: |
          # Run TFLint and capture output
          output=$(tflint -f compact) || true

          # Check if there were any linting issues
          if [ $? -eq 0 ]; then
            echo "TFLint found no issues." >> $GITHUB_STEP_SUMMARY
          else
            echo "TFLint found the following issues:" >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY  # Append linting output to summary
          fi

  Terrascan-IAC:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Terrascan
      run: npm install -g snyk
      
    - name: Run Terrascan
      id: terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'aws'
        only_warn: true

  # Snyk-IAC-Scan:
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: terraform

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install Snyk CLI
  #       run: npm install -g snyk

  #     - name: Run Snyk Code Scan And Check Snyk Scan Results
  #       id: snyk_iac
  #       run: |
  #         # Run Snyk IaC scan and capture output
  #         output=$(snyk iac test --report --severity-threshold=high --scan=resource-changes)

  #         # Check if there were any vulnerabilities found
  #         if [ $? -eq 0 ]; then
  #           echo "Snyk IaC scan completed successfully with no issues found." >> $GITHUB_STEP_SUMMARY
  #         else
  #           echo "Snyk IaC scan found the following issues:" >> $GITHUB_STEP_SUMMARY
  #           echo "$output" >> $GITHUB_STEP_SUMMARY  # Append scan output to summary
  #         fi
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  Checkov:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Checkov
      #   id: checkov
      #   uses: bridgecrewio/checkov-action@master
      #   with:
      #     framework: terraform

  Terraform-Plan:
    needs: [Terraform-Checks, Checkov]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Terraform Init
        run: terraform init

      # - name: Terraform workspace list
      #   run: terraform workspace list

      # - name: Terraform workspace new environment and select
      #   run: |
      #     terraform workspace select -or-create=true ${{ github.base_ref }}
      #     terraform workspace list

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        id: plan
        run: |
          terraform plan -no-color -var-file="${{ github.base_ref }}.tfvars" -out=tfplan > plan_output.txt 2>&1 || true
          echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat plan_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Terraform Plan (Workflow Dispatch)
        if: github.event_name == 'workflow_dispatch'
        id: plan-dispatch
        run: |
          terraform plan -no-color -var-file="dev.tfvars" -out=tfplan > plan_output.txt 2>&1 || true
          echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat plan_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Update-Pull-Request:
  #   needs: [Terraform-Checks, Terraform-Plan, Snyk-IAC-Scan]
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: terraform

  #   steps:
  #     - name: Update Pull Request
  #       if: always()
  #       uses: actions/github-script@v7
  #       env:
  #         PLAN_DETAIL: ${{ needs.Terraform-Plan.outputs.plan_detail }}
  #         PLAN_OUTCOME: ${{ needs.Terraform-Plan.outputs.plan_outcome }}
  #         FMT_OUTCOME: ${{ needs.Terraform-Checks.outputs.fmt_outcome }}
  #         INIT_OUTCOME: ${{ needs.Terraform-Checks.outputs.init_outcome }}
  #         VALIDATE_OUTPUTS_STDOUT: ${{ needs.Terraform-Checks.outputs.validate_outcome }}
  #         TFLINT_OUTCOME: ${{ needs.Terraform-Checks.outputs.tflint_outcome }}
  #         # SNYK_IAC_OUTCOME: ${{ needs.Snyk-IAC-Scan.outputs.snyk_iac_outcome }}
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${process.env.FMT_OUTCOME}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${process.env.INIT_OUTCOME}\`
  #           #### Terraform Validation ü§ñ${process.env.VALIDATE_OUTPUTS_STDOUT}
  #           #### Terraform Lint üßπ\`${process.env.TFLINT_OUTCOME}\`
  #           #### Snyk IAC Scan üîç\`${process.env.SNYK_IAC_OUTCOME}\`
  #           #### Checkov üîç\`${process.env.SNYK_IAC_OUTCOME}\`
  #           #### Terraform Plan üìñ\`${process.env.PLAN_OUTCOME}\`

  #           <details><summary>Show Plan</summary>

  #           \`\`\`${process.env.PLAN_DETAIL}\`\`\`

  #           </details>

  #           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })
